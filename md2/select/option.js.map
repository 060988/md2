{"version":3,"sources":["select/option.ts"],"names":[],"mappings":"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","file":"select/option.js","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n@Component({\n  moduleId: module.id,\n  selector: 'md2-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.md2-selected]': 'selected',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.md2-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)'\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class Md2Option {\n  private _selected: boolean = false;\n\n  /** Whether the option is disabled.  */\n  private _disabled: boolean = false;\n\n  private _id: string = `md2-select-option-${_uniqueIdCounter++}`;\n\n  /** The unique ID of the option. */\n  get id() { return this._id; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() onSelect = new EventEmitter();\n\n  constructor(private _element: ElementRef, private _renderer: Renderer) {}\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   * TODO(kara): Add input property alternative for node envs.\n   */\n  get viewValue(): string {\n    return this._getHostElement().textContent.trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this.onSelect.emit();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction() {\n    if (!this.disabled) {\n      this._selected = true;\n      this.onSelect.emit(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n}\n"],"sourceRoot":"/source/"}