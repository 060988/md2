{"version":3,"sources":["chips/chips.ts"],"names":[],"mappings":"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","file":"chips/chips.js","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  forwardRef,\r\n  Output,\r\n  ViewChild,\r\n  NgModule,\r\n  ElementRef,\r\n  ModuleWithProviders,\r\n  EventEmitter,\r\n  AfterContentInit,\r\n  HostListener,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NgForm,\r\n  FormsModule\r\n} from '@angular/forms';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Md2AutocompleteModule } from '../autocomplete/autocomplete';\r\nimport { KeyCodes } from '../core/core';\r\n\r\nconst noop = () => { };\r\n\r\nexport class Chip {\r\n  public text: string;\r\n  public value: string;\r\n\r\n  constructor(source: any, textKey: string, valueKey: string) {\r\n    if (typeof source === 'string') {\r\n      this.text = this.value = source;\r\n    }\r\n    if (typeof source === 'object') {\r\n      this.text = source[textKey];\r\n      this.value = valueKey ? source[valueKey] : source;\r\n    }\r\n  }\r\n}\r\n\r\nlet nextId = 0;\r\nexport const MD2_CHIPS_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Md2Chips),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'md2-chips',\r\n  template:\r\n  `<div class=\"md2-chips-container\" [class.md2-chip-disabled]=\"readonly\">\r\n        <span *ngFor=\"let chip of chipItemList; let i = index\" class=\"md2-chip\" [class.active]=\"selectedChip === i\">\r\n            <span *ngIf=\"isObject\">{{chip.text}}</span>\r\n            <span *ngIf=\"!isObject\">{{chip}}</span>\r\n            <span [innerHTML]=\"templateHtmlString\"></span>\r\n            <svg (click)=\"removeSelectedChip(i)\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" *ngIf=\"isRemovable\">\r\n                <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n            </svg>\r\n        </span>\r\n        <ng-content select=\".md2-template\"></ng-content>\r\n        <form #chipInputForm=\"ngForm\" class=\"chip-input-form\" *ngIf=\"!readonly\">\r\n            <input *ngIf=\"!isAutoComplete\" class=\"chip-input\" type=\"text\" [(ngModel)]=\"inputValue\" name=\"chipInput\" [placeholder]=\"placeholder\" (paste)=\"inputPaste($event)\" (keydown)=\"inputChanged($event)\" (blur)=\"inputBlurred($event)\" (focus)=\"inputFocus()\" />\r\n            <div *ngIf=\"isAutoComplete\">\r\n                <md2-autocomplete [items]=\"autocompleteDataList\"\r\n                                  [item-text]=\"autocompleteItemText\"\r\n                                  [(ngModel)]=\"item\" name=\"autocomplete\" (textChange)=\"valueupdate($event)\" (change)=\"changeAutocomplete($event)\" [placeholder]=\"placeholder\" (keydown)=\"inputChanged($event)\">\r\n                </md2-autocomplete>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <div class=\"chip-error\" *ngIf=\"this.chipItemList.length<this.minChips\">Minimum {{minChips}} chip required.</div>\r\n    <div class=\"chip-error\" *ngIf=\"this.chipItemList.length>=this.maxChips\">You are able to add Maximum {{maxChips}} chip.</div>\r\n    `,\r\n  styles: [`\r\n    .template-content{display:inline;}\r\n    md2-chips{outline:none;}\r\n    md2-chips .md2-chips-container{display: block;box-shadow: 0 1px #ccc;padding: 5px 0;margin-bottom:10px;min-height:50px;box-sizing: border-box;clear:both;}\r\n    md2-chips .md2-chips-container:after{clear:both;content:'';display:table;}\r\n    md2-chips.chip-input-focus .md2-chips-container{box-shadow: 0 2px #0d8bff;}\r\n    md2-chips .md2-chip-disabled{cursor: default;}\r\n    md2-chips md2-autocomplete{margin:0;}\r\n    md2-chips .md2-autocomplete-wrap{border-bottom:0 !important;}\r\n    .md2-template{display:none;}\r\n    .chip-input-disabled{pointer-events: none;cursor: default;}\r\n    .md2-chip{font-size: 16px;position: relative;cursor: default;border-radius: 16px;display: block;height: 32px;line-height: 32px;margin: 8px 8px 0 0;padding: 0 28px 0 12px;float: left;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;box-sizing: border-box;max-width: 100%;background: rgb(224,224,224);color: rgb(66,66,66);white-space: nowrap;overflow: hidden;-ms-text-overflow: ellipsis;-o-text-overflow: ellipsis;text-overflow: ellipsis;}\r\n    .md2-chip.active {color: white;background: #0d8bff;}    \r\n    .chip-input-form {display: inline-block;height:32px;margin: 8px 8px 0 0;}\r\n    .md2-chip svg {position: absolute; top: 4px; right: 4px; cursor: pointer; display: inline-block; overflow: hidden;fill: currentColor; color: rgba(0,0,0,0.54); }\r\n    .md2-chip.active svg { color: rgba(255,255,255,0.87); }\r\n    .chip-remove {cursor: pointer;display: inline-block;padding: 0 3px;color: #616161;font-size: 30px;vertical-align: top;line-height: 21px;font-family: serif;}\r\n    .chip-input {display: inline-block;width: auto;box-shadow: one;border: 0;outline:none;height: 32px;line-height: 32px;font-size: 16px;}\r\n    .chip-error{font-size:13px;color:#fd0f0f;}\r\n    .md2-chips-container .chip-input-form .md2-autocomplete-wrap{border-bottom:0;}\r\n    .md2-chips-container .md2-autocomplete-wrap.is-focused .md2-autocomplete-placeholder{display:none;}\r\n    .md2-chips-container .md2-autocomplete-wrap .md2-autocomplete-placeholder.has-value{display:none;}\r\n    .md2-chips-container .md2-autocomplete-wrap svg{display:none;}\r\n    .md2-chips-container .md2-autocomplete-wrap .md2-autocomplete-input{height:32px;font-size:16px;}\r\n    .md2-chips-container md2-autocomplete .md2-autocomplete-placeholder{color: #a2a2a2;font-size: 16px;}\r\n  `],\r\n  providers: [MD2_CHIPS_CONTROL_VALUE_ACCESSOR],\r\n\r\n  host: {\r\n    'role': 'chips',\r\n    '[id]': 'id',\r\n    '[tabindex]': 'readonly ? -1 : tabindex',\r\n    '[class.chip-input-focus]': 'inputFocused || selectedChip >= 0',\r\n  },\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class Md2Chips implements ControlValueAccessor, AfterContentInit {\r\n  @Input() tabindex: number = 0;\r\n  @Input() addOnBlur: boolean = true;\r\n  @Input() addOnComma: boolean = true;\r\n  @Input() addOnEnter: boolean = true;\r\n  @Input() addOnPaste: boolean = true;\r\n  @Input() addOnSpace: boolean = false;\r\n  @Input() allowedPattern: RegExp = /.+/;\r\n  @Input() ngModel: string[];\r\n  @Input() pasteSplitPattern: string = ',';\r\n  @Input() placeholder: string = 'Add New';\r\n  @Input() autocompleteDataList: string[];\r\n  @Input() isAutoComplete: boolean = false;\r\n  @Input() isRemovable: boolean = true;\r\n  @Input() readonly: boolean = false;\r\n  @Input() minChips: number = 0;\r\n  @Input() maxChips: number = 10000;\r\n  @Input() id: string = 'md2-chips-' + (++nextId);\r\n  @Input('autocomplete-item-text') autocompleteItemText: string = 'text';\r\n  @Input('item-text') textKey: string = 'text';\r\n  @Input('item-value') valueKey: string = null;\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\r\n  @ViewChild('chipInputForm') chipInputForm: NgForm;\r\n\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n  chipItemList: Array<Chip> = [];\r\n  public inputValue: string = '';\r\n  private _value: any = '';\r\n  public selectedChip: number = -1;\r\n  private splitRegExp: RegExp;\r\n  private templateHtmlString: any;\r\n  private item: any;\r\n  inputFocused: boolean = false;\r\n  private isEmptyAutoComplete: boolean = true;\r\n  private isObject: boolean;\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  get element() {\r\n    const elements: any = { root: this.elementRef.nativeElement, mainDiv: null, template: null };\r\n    elements.mainDiv = elements.root.querySelector('.md2-chips-container');\r\n    elements.template = elements.mainDiv.querySelector('.md2-template');\r\n    return elements;\r\n  }\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) { this.setValue(value); }\r\n\r\n\r\n  /**\r\n   * set value\r\n   * @param value\r\n   */\r\n  set setValue(value: any) {\r\n    if (value !== this._value) {\r\n      this._value = value;\r\n      this.chipItemList = [];\r\n      if (value) {\r\n        if (value && value.length && typeof value[0] === 'object' && Array.isArray(value)) {\r\n          for (let i = 0; i < value.length; i++) {\r\n            this.chipItemList.push(new Chip(value[i], this.textKey, this.valueKey));\r\n          }\r\n          this.isObject = true;\r\n        } else if (value && value.length && typeof value[0] === 'string' && Array.isArray(value)) {\r\n          this.chipItemList = value;\r\n          this.isObject = false;\r\n        }\r\n      }\r\n    }\r\n    this.onChangeCallback(value);\r\n    this.change.emit(this.chipItemList);\r\n  }\r\n\r\n  changeAutocomplete(value: any) {\r\n    if (value) {\r\n      let objText = value[this.autocompleteItemText];\r\n      this.addNewChip(objText);\r\n      this.item = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    let elements = this.element;\r\n    this.splitRegExp = new RegExp(this.pasteSplitPattern);\r\n    if (elements.template) {\r\n      this.templateHtmlString = elements.template.innerHTML;\r\n    }\r\n  }\r\n\r\n  // check autocomplete input is empty or not\r\n  valueupdate(evt: Event) {\r\n    this.isEmptyAutoComplete = evt ? false : true;\r\n  }\r\n\r\n  /**\r\n   * input key listener\r\n   * @param event\r\n   */\r\n  inputChanged(event: KeyboardEvent): void {\r\n    let key = event.keyCode;\r\n    switch (key) {\r\n      // back space\r\n      case KeyCodes.BACKSPACE:\r\n        this.backspaceEvent();\r\n        break;\r\n      // delete\r\n      case KeyCodes.DELETE:\r\n        this.backspaceEvent();\r\n        break;\r\n      // left arrow\r\n      case KeyCodes.LEFT_ARROW:\r\n        if (this.isAutoComplete && this.isEmptyAutoComplete) {\r\n          this.leftArrowKeyEvents();\r\n        } else if (!this.isAutoComplete && !this.inputValue) {\r\n          this.leftArrowKeyEvents();\r\n        }\r\n        break;\r\n      // right arrow\r\n      case KeyCodes.RIGHT_ARROW:\r\n        if (this.isAutoComplete && this.isEmptyAutoComplete) {\r\n          this.rightArrowKeyEvents();\r\n        } else if (!this.isAutoComplete && !this.inputValue) {\r\n          this.rightArrowKeyEvents();\r\n        }\r\n        break;\r\n      // enter\r\n      case KeyCodes.ENTER:\r\n        if (this.addOnEnter) {\r\n          this.addNewChip(this.inputValue);\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      // comma\r\n      case KeyCodes.COMMA:\r\n        if (this.addOnComma) {\r\n          this.addNewChip(this.inputValue);\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      // space\r\n      case KeyCodes.SPACE:\r\n        if (this.addOnSpace) {\r\n          this.addNewChip(this.inputValue);\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  _handleFocus() {\r\n    if (this.readonly) { return; }\r\n    if (!this.isAutoComplete) {\r\n      this.elementRef.nativeElement.querySelector('input.chip-input').focus();\r\n    }\r\n    this._resetSelected();\r\n  }\r\n  inputBlurred(event: Event): void {\r\n    this.inputFocused = false;\r\n  }\r\n\r\n  inputFocus(event: Event): void {\r\n    if (this.readonly) { return; }\r\n    this.inputFocused = true;\r\n  }\r\n\r\n  inputPaste(event: any): void {\r\n    let clipboardData = event.clipboardData || (event.originalEvent && event.originalEvent.clipboardData);\r\n    let pastedString = clipboardData.getData('text/plain');\r\n    let chips = this.addRegExpString(pastedString);\r\n    let chipsToAdd = chips.filter((chip) => this._isValid(chip));\r\n    this.addNewChip(chipsToAdd);\r\n    setTimeout(() => this._resetInput());\r\n  }\r\n\r\n  leftArrowKeyEvents() {\r\n    event.preventDefault();\r\n    if (this.selectedChip) {\r\n      if (this.selectedChip < 0) {\r\n        this.selectedChip = this.chipItemList.length - 1;\r\n      } else {\r\n        this.selectedChip = this.selectedChip - 1;\r\n      }\r\n    }\r\n  }\r\n  rightArrowKeyEvents() {\r\n    event.preventDefault();\r\n    if (this.selectedChip != -1) {\r\n      if (this.selectedChip >= this.chipItemList.length) {\r\n        this.selectedChip = 0;\r\n      } else {\r\n        this.selectedChip = this.selectedChip + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  private addRegExpString(chipInputString: string): string[] {\r\n    chipInputString = chipInputString.trim();\r\n    let chips = chipInputString.split(this.splitRegExp);\r\n    return chips.filter((chip) => !!chip);\r\n  }\r\n\r\n  private _isValid(chipString: any): boolean {\r\n    if (chipString) {\r\n      let isExist: any;\r\n      if (this.isObject) {\r\n        isExist = this.chipItemList.filter((chip) => chip.text === chipString);\r\n        return isExist.length ? false : true;\r\n      } else if (this.chipItemList.indexOf(chipString) === -1) {\r\n        return this.allowedPattern.test(chipString);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n  * add new chip\r\n  * @param chips\r\n  */\r\n  private addNewChip(chips: any): void {\r\n    let validInput = this._isValid(chips);\r\n    if (validInput) {\r\n      if (this.maxChips) {\r\n        if (this.chipItemList.length < this.maxChips) {\r\n          if (this.isObject && this.chipItemList.length > 0) {\r\n            let a: any = {};\r\n            a[this.textKey] = chips;\r\n            this.chipItemList.push(new Chip(a, this.textKey, this.valueKey));\r\n          } else {\r\n            this.chipItemList.push(chips);\r\n          }\r\n        }\r\n      } else {\r\n        this.chipItemList.push(new Chip(chips, this.textKey, this.valueKey));\r\n        this.item = null;\r\n      }\r\n    }\r\n    this._resetSelected();\r\n    this._resetInput();\r\n    this.updateValue();\r\n  }\r\n\r\n  /**\r\n * remove selected chip\r\n * @param chipIndexToRemove index of selected chip\r\n */\r\n  private removeSelectedChip(chipIndexToRemove: number): void {\r\n    this.chipItemList.splice(chipIndexToRemove, 1);\r\n    this._resetSelected();\r\n    this.updateValue();\r\n  }\r\n\r\n  private backspaceEvent(): void {\r\n    if (!this.inputValue.length && this.chipItemList.length && this.isRemovable && this.isEmptyAutoComplete) {\r\n      if (this.selectedChip != -1) {\r\n        this.removeSelectedChip(this.selectedChip);\r\n        this.selectedChip = this.chipItemList.length - 1;\r\n      } else {\r\n        this.selectedChip = this.chipItemList.length - 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _resetSelected(): void {\r\n    this.selectedChip = -1;\r\n  }\r\n\r\n  private _resetInput(): void {\r\n    if (this.isAutoComplete) {\r\n      this.chipInputForm.controls['autocomplete'].setValue('');\r\n    } else {\r\n      this.chipInputForm.controls['chipInput'].setValue('');\r\n    }\r\n  }\r\n  /**\r\n   * update value\r\n   */\r\n  private updateValue() {\r\n    this._value = new Array<any>();\r\n    for (let i = 0; i < this.chipItemList.length; i++) {\r\n      if (this.isObject) {\r\n        this._value.push(this.chipItemList[i].value);\r\n      } else {\r\n        this._value.push(this.chipItemList[i]);\r\n      }\r\n    }\r\n    this.onChangeCallback(this._value);\r\n    this.change.emit(this._value);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    if (value !== this._value) {\r\n      this._value = value;\r\n      this.chipItemList = [];\r\n      if (value) {\r\n        if (value && value.length && typeof value[0] === 'object' && Array.isArray(value)) {\r\n          for (let i = 0; i < value.length; i++) {\r\n            this.chipItemList.push(new Chip(value[i], this.textKey, this.valueKey));\r\n          }\r\n          this.isObject = true;\r\n        } else if (value && value.length && typeof value[0] === 'string' && Array.isArray(value)) {\r\n          this.chipItemList = value;\r\n          this.isObject = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  registerOnChange(fn: any) { this.onChangeCallback = fn; }\r\n  registerOnTouched(fn: any) { this.onTouchedCallback = fn; }\r\n}\r\n\r\nexport const MD2_CHIPS_DIRECTIVES: any[] = [Md2Chips];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, Md2AutocompleteModule],\r\n  declarations: MD2_CHIPS_DIRECTIVES,\r\n  exports: MD2_CHIPS_DIRECTIVES\r\n})\r\nexport class Md2ChipsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: Md2ChipsModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}