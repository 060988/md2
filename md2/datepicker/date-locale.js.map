{"version":3,"file":"date-locale.js","sourceRoot":"","sources":["../../../src/lib/datepicker/date-locale.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EACL,UAAU,GACX,MAAM,eAAe,CAAC;AAEvB,iDAAiD;AACjD,IAAM,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC;AAEjC,iDAAiD;AACjD,eAAkB,MAAc,EAAE,aAAmC;IACnE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAY,EAAE,CAAS,IAAK,OAAA,aAAa,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC;AAC7F,CAAC;AAED,oGAAoG;AAEpG,IAAa,UAAU;IADvB;QAEE,mBAAc,GAAG,CAAC,CAAC;QAEnB,WAAM,GAAG;YACP,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;YACjC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;YAClC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;YAC/B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;YAC/B,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;YAC7B,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;YAC9B,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;YAC9B,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;YAChC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE;YACnC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;YACjC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;YAClC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;SACnC,CAAC;QAEF,eAAU,GAAG,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YAC9D;gBACE,SAAS;gBACT,UAAU;gBACV,OAAO;gBACP,OAAO;gBACP,KAAK;gBACL,MAAM;gBACN,MAAM;gBACN,QAAQ;gBACR,WAAW;gBACX,SAAS;gBACT,UAAU;gBACV,UAAU;aACX,CAAC;QAEJ,gBAAW,GAAG,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;YAChE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAEvF,iBAAY,GAAG,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YAClE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAE/D,SAAI,GAAG;YACL,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC7C,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC7C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC9C,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC/C,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC7C,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;SAChD,CAAC;QAEF,aAAQ,GAAG,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;YAC1D,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAEjF,cAAS,GAAG,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YAC5D,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAEpD,eAAU,GAAG,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;YAC9D,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IA2BxC,CAAC;IAzBC,4BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;aAC1D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,gCAAW,GAAX,UAAY,CAAS,IAAI,MAAM,CAAC,KAAG,CAAG,CAAC,CAAC,CAAC;IAEzC,iCAAY,GAAZ,UAAa,CAAO;QAClB,MAAM,CAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,UAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,SAAI,CAAC,CAAC,OAAO,EAAI,CAAC;IAC7F,CAAC;IAED,kCAAa,GAAb,UAAc,CAAS,EAAE,CAAS,IAAI,MAAM,CAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,SAAI,CAAG,CAAC,CAAC,CAAC;IAE7E,iCAAY,GAAZ,UAAa,CAAS,IAAI,MAAM,CAAC,KAAG,CAAG,CAAC,CAAC,CAAC;IAElC,uCAAkB,GAA1B,UAA2B,MAAc;QACvC,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAhC,CAAgC,CAAC,CAAC;IAC1D,CAAC;IAEO,qCAAgB,GAAxB,UAAyB,MAAc;QACrC,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAApC,CAAoC,CAAC,CAAC;IAC7D,CAAC;IAEH,iBAAC;AAAD,CAAC,AApFD,IAoFC;AApFY,UAAU;IADtB,UAAU,EAAE;GACA,UAAU,CAoFtB;SApFY,UAAU","sourcesContent":["import {\n  Injectable,\n} from '@angular/core';\n\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = !!Intl;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  return Array.apply(null, Array(length)).map((v: undefined, i: number) => valueFunction(i));\n}\n\n/** Date locale info. TODO(mmalerba): Integrate with i18n solution once we know what we're doing. */\n@Injectable()\nexport class DateLocale {\n  firstDayOfWeek = 0;\n\n  months = [\n    { full: 'January', short: 'Jan' },\n    { full: 'February', short: 'Feb' },\n    { full: 'March', short: 'Mar' },\n    { full: 'April', short: 'Apr' },\n    { full: 'May', short: 'May' },\n    { full: 'June', short: 'Jun' },\n    { full: 'July', short: 'Jul' },\n    { full: 'August', short: 'Aug' },\n    { full: 'September', short: 'Sep' },\n    { full: 'October', short: 'Oct' },\n    { full: 'November', short: 'Nov' },\n    { full: 'December', short: 'Dec' },\n  ];\n\n  fullMonths = SUPPORTS_INTL_API ? this._createMonthsArray('long') :\n    [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n  shortMonths = SUPPORTS_INTL_API ? this._createMonthsArray('short') :\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  narrowMonths = SUPPORTS_INTL_API ? this._createMonthsArray('narrow') :\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n\n  days = [\n    { full: 'Sunday', short: 'Sun', xshort: 'S' },\n    { full: 'Monday', short: 'Mon', xshort: 'M' },\n    { full: 'Tuesday', short: 'Tue', xshort: 'T' },\n    { full: 'Wednesday', short: 'Wed', xshort: 'W' },\n    { full: 'Thursday', short: 'Thu', xshort: 'T' },\n    { full: 'Friday', short: 'Fri', xshort: 'F' },\n    { full: 'Saturday', short: 'Sat', xshort: 'S' },\n  ];\n\n  fullDays = SUPPORTS_INTL_API ? this._createDaysArray('long') :\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  shortDays = SUPPORTS_INTL_API ? this._createDaysArray('short') :\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  narrowDays = SUPPORTS_INTL_API ? this._createDaysArray('narrow') :\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\n  getDays() {\n    return this.days.slice(this.firstDayOfWeek, this.days.length)\n      .concat(this.days.slice(0, this.firstDayOfWeek));\n  }\n\n  getDayLabel(d: number) { return `${d}`; }\n\n  getDateLabel(d: Date) {\n    return `${this.days[d.getDay()].short}, ${this.months[d.getMonth()].short} ${d.getDate()}`;\n  }\n\n  getMonthLabel(m: number, y: number) { return `${this.months[m].full} ${y}`; }\n\n  getYearLabel(y: number) { return `${y}`; }\n\n  private _createMonthsArray(format: string) {\n    let dtf = new Intl.DateTimeFormat(undefined, { month: format });\n    return range(12, i => dtf.format(new Date(2017, i, 1)));\n  }\n\n  private _createDaysArray(format: string) {\n    let dtf = new Intl.DateTimeFormat(undefined, { weekday: format });\n    return range(7, i => dtf.format(new Date(2017, 0, i + 1)));\n  }\n\n}\n"]}